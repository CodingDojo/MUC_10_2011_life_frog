{:visible_files=>{"cyberdojo.sh"=>{:scroll_left=>"0", :content=>"gmcs -t:library Untitled.cs\nif [ $? -eq 0 ]; then\n  gmcs -t:library -r:Untitled.dll -r:nunit.framework.dll UntitledTest.cs\n  if [ $? -eq 0 ]; then\n    nunit-console -nologo UntitledTest.dll\n  fi\nfi\n\n", :caret_pos=>"0", :scroll_top=>"0"}, "output"=>{:scroll_left=>"0", :content=>"...F\nTests run: 3, Failures: 1, Not run: 0, Time: 0.065 seconds\r\n\r\nTest Case Failures:\r\n1) UntitledTest.Simple3x1ToLife :   String lengths are both 3. Strings differ at index 1.\n  Expected: \".*.\"\n  But was:  \"...\"\n  ------------^\n\r\nat UntitledTest.Simple3x1ToLife () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n\r\n", :caret_pos=>"61", :scroll_top=>"0"}, "Untitled.cs"=>{:scroll_left=>"0", :content=>"\npublic class LifeCalculator\n{\n    public static string[] Calc(string[] input)\n    {\n        var output = CreateEmptyClone(input);\n        for (int row = 0; row < input.Length; row++)\n        {\n            for (int col = 0; col < input[row].Length; col++)\n            {\n                 bool life = CalculateCell(input, row, col);\n                 if (life)\n                 {\n                    var array = output[row].ToCharArray();\n                    array[col] = '*';\n                    output[row] = new string(array);\n                 }\n            }\n        }\n        return output;\n    }\n\n    private static bool CalculateCell(string[] input, int row, int col)\n    {\n        bool isAlive = input[row][col] == '*';\n        int neighbors = 0;\n        neighbors = CountNeighbors(input, row, col);\n        // rule 1:\n        if (isAlive && neighbors < 2)\n            return false;\n        // rule 2:\n        if (isAlive && neighbors > 3)\n            return false;\n        // rule 3:\n        if (isAlive && neighbors >= 2 && neighbors <=3)\n            return true;\n        // rule 4:\n        if (!isAlive && neighbors == 3)\n            return true;\n        return false;\n    }\n\n    private static int CountNeighbors(string[] input, int row, int col)\n    {\n        return 0;\n    }\n\n    private static string[] CreateEmptyClone(string[] source)\n    {\n        string[] dest = new string[source.Length];\n        for(int i=0; i<source.Length; i++)\n            dest[i] = new string('.',source[i].Length);\n        return dest;\n    }\n}\n", :caret_pos=>"1402", :scroll_top=>"414"}, "UntitledTest.cs"=>{:scroll_left=>"0", :content=>"\nusing NUnit.Framework;\n\n[TestFixture]\npublic class UntitledTest\n{\n    [Test]\n    public void Simple()\n    {\n        var result = LifeCalculator.Calc(new string[]{\".\"});\n        Assert.AreEqual(1, result.Length);\n        Assert.AreEqual(\".\",result[0]);\n    }\n\n    [Test]\n    public void Simple3x1ToLife()\n    {\n        var result = LifeCalculator.Calc(new string[]{\"***\"});\n        Assert.AreEqual(1, result.Length);\n        Assert.AreEqual(\".*.\",result[0]);\n    }\n\n    [Test]\n    public void Simple3x1ToDead()\n    {\n        var result = LifeCalculator.Calc(new string[]{\".*.\"});\n        Assert.AreEqual(1, result.Length);\n        Assert.AreEqual(\"...\",result[0]);\n    }\n\n//    [Test]\n    public void Complex2x2ToLife()\n    {\n        var result = LifeCalculator.Calc(new string[]{\".*\",\n                                       \"**\"});\n        Assert.AreEqual(2, result.Length);\n        Assert.AreEqual(\"**\",result[0]);\n        Assert.AreEqual(\"**\",result[0]);\n    }\n\n}\n\n", :caret_pos=>"648", :scroll_top=>"34"}, "instructions"=>{:scroll_left=>"0", :content=>"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n\n", :caret_pos=>"709", :scroll_top=>"0"}}, :output=>"...F\nTests run: 3, Failures: 1, Not run: 0, Time: 0.065 seconds\r\n\r\nTest Case Failures:\r\n1) UntitledTest.Simple3x1ToLife :   String lengths are both 3. Strings differ at index 1.\n  Expected: \".*.\"\n  But was:  \"...\"\n  ------------^\n\r\nat UntitledTest.Simple3x1ToLife () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n\r\n", :current_filename=>"output"}
