{:visible_files=>{"cyberdojo.sh"=>{:scroll_left=>"0", :content=>"gmcs -t:library Untitled.cs\nif [ $? -eq 0 ]; then\n  gmcs -t:library -r:Untitled.dll -r:nunit.framework.dll UntitledTest.cs\n  if [ $? -eq 0 ]; then\n    nunit-console -nologo UntitledTest.dll\n  fi\nfi\n\n", :caret_pos=>"0", :scroll_top=>"0"}, "output"=>{:scroll_left=>"0", :content=>"Untitled.cs(6,13): warning CS0168: The variable `output' is declared but never used\nUntitled.cs(4,28): error CS0161: `LifeCalculator.Calc(string[])': not all code paths return a value\nCompilation failed: 1 error(s), 1 warnings\n", :caret_pos=>"578", :scroll_top=>"0"}, "Untitled.cs"=>{:scroll_left=>"0", :content=>"\npublic class LifeCalculator\n{\n    public static string[] Calc(string[] input)\n    {\n        var output = CreateEmptyClone(input);\n        for (int row = 0; row < input.Length; row++)\n        {\n            for (int col = 0; col < input[row].Length; col++)\n            {\n                 bool life = CalculateCell(input, row, col);\n                 if (life)\n                 {\n                    var array = input[row].ToCharArray();\n                    array[col] = '*';\n                    input[row] = new string(array);\n                 }\n            }\n        }\n    }\n\n    private static bool CalculateCell(string[] input, int row, int col)\n    {\n        return true;\n    }\n\n    private static string[] CreateEmptyClone(string[] source)\n    {\n        string[] dest = new string[source.Length];\n        for(int i=0; i<source.Length; i++)\n            dest[i] = new string('.',source[i].Length);\n        return dest;\n    }\n}\n", :caret_pos=>"745", :scroll_top=>"0"}, "UntitledTest.cs"=>{:scroll_left=>"0", :content=>"\nusing NUnit.Framework;\n\n[TestFixture]\npublic class UntitledTest\n{\n    [Test]\n    public void Simple()\n    {\n        var result = LifeCalculator.Calc(new string[]{\".\"});\n        Assert.AreEqual(1, result.Length);\n        Assert.AreEqual(\".\",result[0]);\n    }\n\n    [Test]\n    public void Complex2x2ToLife()\n    {\n        var result = LifeCalculator.Calc(new string[]{\".*\",\n                                       \"**\"});\n        Assert.AreEqual(2, result.Length);\n        Assert.AreEqual(\"**\",result[0]);\n        Assert.AreEqual(\"**\",result[0]);\n    }\n\n}\n\n", :caret_pos=>"472", :scroll_top=>"0"}, "instructions"=>{:scroll_left=>"0", :content=>"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n\n", :caret_pos=>"798", :scroll_top=>"0"}}, :output=>"Untitled.cs(6,13): warning CS0168: The variable `output' is declared but never used\nUntitled.cs(4,28): error CS0161: `LifeCalculator.Calc(string[])': not all code paths return a value\nCompilation failed: 1 error(s), 1 warnings\n", :current_filename=>"output"}
